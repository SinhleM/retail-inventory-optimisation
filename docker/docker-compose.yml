# docker/docker-compose.yml

version: '3.8'

services:
  # PostgreSQL Database Service
  db:
    image: postgres:13
    container_name: postgres_db
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: retail_dw
    volumes:
      # Mount the schema file to initialize the database
      - ../db/schema.sql:/docker-entrypoint-initdb.d/init.sql
      # Persist database data
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d retail_dw"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ETL Pipeline Service
  etl:
    container_name: etl_pipeline
    build:
      context: .. # The context is the root project directory
      dockerfile: docker/Dockerfile.etl
    environment:
      # Pass database connection details to the ETL script
      DB_USER: user
      DB_PASSWORD: password
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: retail_dw
    volumes:
      # Mount the project directory to reflect code changes without rebuilding
      - ../:/app
    depends_on:
      db:
        condition: service_healthy # Wait for the DB to be ready

  # pgAdmin Web Interface (Optional but Recommended)
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin_ui
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "8080:80"
    depends_on:
      db:
        condition: service_healthy

volumes:
  postgres_data: